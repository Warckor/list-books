---
name: Integration workflow
run-name: "${{ github.actor }}: Test and integration for backend and frontend"
on:
  push:
    branches:
      - master
    tags:
      - v*
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  check_project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile

      - name: Lint frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile

      - name: Validate Docker Compose file
        run: |
          docker compose -f ./docker-compose.yaml config

  test_backend:
    needs: check_project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip" # caching pip dependencies

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend

      - name: Run tests
        run: pytest
        working-directory: ./backend

  test_frontend:
    needs: check_project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.x"

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run tests
        run: npm test
        working-directory: ./frontend

  integration:
    needs: [test_backend, test_frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Backend Version
        id: back_version
        run: |
          # Si el commit tiene un tag, úsalo como versión
          if git describe --tags --exact-match >/dev/null 2>&1; then
            backend_version=$(git describe --tags)
            echo "backend_version=$backend_version" >> $GITHUB_ENV
          else
            # Fallback al SHA corto del commit
            backend_version=$(git rev-parse --short HEAD)
            echo "backend_version=$backend_version" >> $GITHUB_ENV
          fi
          echo "VERSION_BACKEND: $backend_version"

      - name: Extract Frontend Version
        id: front_version
        run: |
          # Leer el campo "version" del package.json
          frontend_version=$(jq -r '.version' ./frontend/package.json)
          echo "frontend_version=$frontend_version" >> $GITHUB_ENV
          echo "VERSION_FRONTEND: $frontend_version"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ github.repository }}:${{ steps.back_version.outputs.backend_version }} \
            --push \
            ./backend

      - name: Build and Push Frontend Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/frontend:${{ steps.front_version.outputs.frontend_version }} \
          ./frontend
          docker push ghcr.io/${{ github.repository }}/frontend:${{ steps.front_version.outputs.frontend_version }}
